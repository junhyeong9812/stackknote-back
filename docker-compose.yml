version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:16-alpine
    container_name: stacknote-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-stacknote}
      POSTGRES_USER: ${POSTGRES_USER:-stacknote_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stacknote_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - C:\Users\pickj\webserver\stacknote\postgres_data:/var/lib/postgresql/data
      - ./docker/postgre/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgre/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5433:5432"  # 기존 MySQL 3306과 충돌 방지
    networks:
      - stacknote-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-stacknote_user} -d ${POSTGRES_DB:-stacknote}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Spring Boot 애플리케이션
  stacknote-app:
    build:
      context: .
      dockerfile: docker/spring/Dockerfile
    container_name: stacknote-app
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-stacknote}
      DB_USERNAME: ${POSTGRES_USER:-stacknote_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-stacknote_password}
      JWT_SECRET: ${JWT_SECRET}
      UPLOAD_DIR: /app/images
    volumes:
      - C:\Users\pickj\webserver\stacknote\app_images:/app/images
      - C:\Users\pickj\webserver\stacknote\app_logs:/app/logs
    ports:
      - "8081:8080"  # 기존 fream 8080과 충돌 방지
    networks:
      - stacknote-network
      - prod_default  # 추가
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Next.js 프론트엔드
  frontend:
    build:
      context: ../stackknote-front
      dockerfile: Dockerfile
    container_name: stacknote-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8081/api  # 백엔드 포트 변경 반영
    ports:
      - "3001:3001"  # 기존 서비스와 충돌 방지
    networks:
      - stacknote-network
      - prod_default  # 추가
    depends_on:
      - stacknote-app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 개발용 pgAdmin (선택사항)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: stacknote-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@stacknote.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - C:\Users\pickj\webserver\stacknote\pgadmin_data:/var/lib/pgadmin
    ports:
      - "5051:80"  # 기존 서비스와 충돌 방지
    networks:
      - stacknote-network
    depends_on:
      - postgres
    profiles:
      - dev

# 별도 네트워크로 기존 서비스와 분리
networks:
  stacknote-network:
    driver: bridge
    name: stacknote-network
  prod_default:
    external: true

# 로컬 경로 바인딩 사용으로 volumes 섹션 제거