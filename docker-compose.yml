version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    container_name: stacknote-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - stacknote-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot 애플리케이션
  app:
    build:
      context: .
      dockerfile: ./docker/spring/Dockerfile
    container_name: stacknote-app
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./images:/app/images
    ports:
      - "8080:8080"
    networks:
      - stacknote-network
    depends_on:
      postgres:
        condition: service_healthy

networks:
  stacknote-network:
    driver: bridge

volumes:
  postgres_data:
    driver: localversion: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    container_name: stacknote-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - stacknote-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot 애플리케이션
  app:
    build:
      context: .
      dockerfile: ./docker/spring/Dockerfile
    container_name: stacknote-app
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: postgres
      DB_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./images:/app/images
    ports:
      - "8080:8080"
    networks:
      - stacknote-network
    depends_on:
      postgres:
        condition: service_healthy

# 네트워크 설정
networks:
  stacknote-network:
    driver: bridge

# 볼륨 설정
volumes:
  postgres_data:
    driver: localversion: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:16-alpine
    container_name: stacknote-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-stacknote}
      POSTGRES_USER: ${POSTGRES_USER:-stacknote_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stacknote_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - stacknote-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-stacknote_user} -d ${POSTGRES_DB:-stacknote}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Spring Boot 애플리케이션
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stacknote-app
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-stacknote}
      DB_USERNAME: ${POSTGRES_USER:-stacknote_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-stacknote_password}
      JWT_SECRET: ${JWT_SECRET}
      UPLOAD_DIR: /app/images
    volumes:
      - app_images:/app/images
      - app_logs:/app/logs
    ports:
      - "8080:8080"
    networks:
      - stacknote-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 개발용 pgAdmin (선택사항)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: stacknote-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@stacknote.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - stacknote-network
    depends_on:
      - postgres
    profiles:
      - dev

# 네트워크 설정
networks:
  stacknote-network:
    driver: bridge

# 볼륨 설정
volumes:
  postgres_data:
    driver: local
  app_images:
    driver: local
  app_logs:
    driver: local
  pgadmin_data:
    driver: local