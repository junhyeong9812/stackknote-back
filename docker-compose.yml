version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    build:
      context: ./docker/postgre
      dockerfile: Dockerfile
    container_name: stacknote-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_HOST_AUTH_METHOD: md5
      TZ: Asia/Seoul
    volumes:
      - C:\Users\pickj\webserver\stacknote\postgres_data:/var/lib/postgresql/data
      - ./docker/postgre/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    networks:
      - stacknote-network
      - prod_default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
#  postgres:
#    image: postgres:16-alpine
#    container_name: stacknote-postgres
#    restart: unless-stopped
#    environment:
#      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
#    volumes:
#      - C:\Users\pickj\webserver\stacknote\postgres_data:/var/lib/postgresql/data
#      - ./docker/postgre/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
#      - ./docker/postgre/postgresql.conf:/etc/postgresql/postgresql.conf:ro
#      - ./docker/postgre/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
#    ports:
#      - "5433:5432"
#    networks:
#      - stacknote-network
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    command: |
#      postgres
#      -c config_file=/etc/postgresql/postgresql.conf
#      -c hba_file=/etc/postgresql/pg_hba.conf
#      -c listen_addresses='*'

  # Spring Boot 애플리케이션
  stacknote-app:
    build:
      context: .
      dockerfile: docker/spring/Dockerfile
    container_name: stacknote-app
    restart: unless-stopped
    environment:
      # Spring 프로필
      SPRING_PROFILES_ACTIVE: prod

      # 데이터베이스 연결 설정
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

      # JPA 설정
      DB_DDL_AUTO: ${DB_DDL_AUTO}
      DB_SHOW_SQL: ${DB_SHOW_SQL}
      DB_FORMAT_SQL: ${DB_FORMAT_SQL}

      # JWT 보안
      JWT_SECRET: ${JWT_SECRET}

      # CORS 설정
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}

      # 데이터 초기화
      DATA_INIT_ENABLED: ${DATA_INIT_ENABLED}
      DATA_INIT_ADMIN_COUNT: ${DATA_INIT_ADMIN_COUNT}
      DATA_INIT_USER_COUNT: ${DATA_INIT_USER_COUNT}

      # 관리자 계정
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_USERNAME: ${ADMIN_USERNAME}

      # 로깅 설정
      LOG_LEVEL_APP: ${LOG_LEVEL_APP}
      LOG_LEVEL_SQL: ${LOG_LEVEL_SQL}
      LOG_LEVEL_SQL_BIND: ${LOG_LEVEL_SQL_BIND}

      # 앱 설정
      APP_SECURE_COOKIES: ${APP_SECURE_COOKIES}

      # 파일 경로
      UPLOAD_DIR: /app/images
      LOG_DIR: /app/logs
    volumes:
      - C:\Users\pickj\webserver\stacknote\app_images:/app/images
      - C:\Users\pickj\webserver\stacknote\app_logs:/app/logs
    ports:
      - "8081:8080"  # 기존 fream 8080과 충돌 방지
    networks:
      - stacknote-network
      - prod_default  # 추가
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Next.js 프론트엔드
  frontend:
    build:
      context: ../stackknote-front
      dockerfile: Dockerfile
    container_name: stacknote-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      # 프론트엔드에서는 동적 URL 생성을 사용하므로 기본값만 설정
      NEXT_PUBLIC_API_URL: https://www.pinjun.xyz/stacknote/api
    ports:
      - "3001:3001"  # 기존 서비스와 충돌 방지
    networks:
      - stacknote-network
      - prod_default  # 추가
    depends_on:
      - stacknote-app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 개발용 pgAdmin (선택사항)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: stacknote-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - C:\Users\pickj\webserver\stacknote\pgadmin_data:/var/lib/pgadmin
    ports:
      - "5051:80"  # 기존 서비스와 충돌 방지
    networks:
      - stacknote-network
    depends_on:
      - postgres
    profiles:
      - dev

# 별도 네트워크로 기존 서비스와 분리
networks:
  stacknote-network:
    driver: bridge
    name: stacknote-network
  prod_default:
    external: true